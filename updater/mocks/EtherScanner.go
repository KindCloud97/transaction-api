// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	etherscan "github.com/KindCloud97/transactionapi/etherscan"
	mock "github.com/stretchr/testify/mock"
)

// EtherScanner is an autogenerated mock type for the EtherScanner type
type EtherScanner struct {
	mock.Mock
}

type EtherScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *EtherScanner) EXPECT() *EtherScanner_Expecter {
	return &EtherScanner_Expecter{mock: &_m.Mock}
}

// GetBlock provides a mock function with given fields: blockNum
func (_m *EtherScanner) GetBlock(blockNum int64) (etherscan.Block, error) {
	ret := _m.Called(blockNum)

	var r0 etherscan.Block
	if rf, ok := ret.Get(0).(func(int64) etherscan.Block); ok {
		r0 = rf(blockNum)
	} else {
		r0 = ret.Get(0).(etherscan.Block)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EtherScanner_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type EtherScanner_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - blockNum int64
func (_e *EtherScanner_Expecter) GetBlock(blockNum interface{}) *EtherScanner_GetBlock_Call {
	return &EtherScanner_GetBlock_Call{Call: _e.mock.On("GetBlock", blockNum)}
}

func (_c *EtherScanner_GetBlock_Call) Run(run func(blockNum int64)) *EtherScanner_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *EtherScanner_GetBlock_Call) Return(_a0 etherscan.Block, _a1 error) *EtherScanner_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLatestBlock provides a mock function with given fields:
func (_m *EtherScanner) GetLatestBlock() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EtherScanner_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type EtherScanner_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
func (_e *EtherScanner_Expecter) GetLatestBlock() *EtherScanner_GetLatestBlock_Call {
	return &EtherScanner_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock")}
}

func (_c *EtherScanner_GetLatestBlock_Call) Run(run func()) *EtherScanner_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EtherScanner_GetLatestBlock_Call) Return(_a0 int64, _a1 error) *EtherScanner_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTransaction provides a mock function with given fields: hash
func (_m *EtherScanner) GetTransaction(hash string) (etherscan.Transaction, error) {
	ret := _m.Called(hash)

	var r0 etherscan.Transaction
	if rf, ok := ret.Get(0).(func(string) etherscan.Transaction); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(etherscan.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EtherScanner_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type EtherScanner_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - hash string
func (_e *EtherScanner_Expecter) GetTransaction(hash interface{}) *EtherScanner_GetTransaction_Call {
	return &EtherScanner_GetTransaction_Call{Call: _e.mock.On("GetTransaction", hash)}
}

func (_c *EtherScanner_GetTransaction_Call) Run(run func(hash string)) *EtherScanner_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EtherScanner_GetTransaction_Call) Return(_a0 etherscan.Transaction, _a1 error) *EtherScanner_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewEtherScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewEtherScanner creates a new instance of EtherScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEtherScanner(t mockConstructorTestingTNewEtherScanner) *EtherScanner {
	mock := &EtherScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
