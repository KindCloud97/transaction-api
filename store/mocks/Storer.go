// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	store "github.com/KindCloud97/transactionapi/store"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

type Storer_Expecter struct {
	mock *mock.Mock
}

func (_m *Storer) EXPECT() *Storer_Expecter {
	return &Storer_Expecter{mock: &_m.Mock}
}

// FindPage provides a mock function with given fields: tran, pageNum, pageSize
func (_m *Storer) FindPage(tran store.Transaction, pageNum int, pageSize int) ([]store.Transaction, error) {
	ret := _m.Called(tran, pageNum, pageSize)

	var r0 []store.Transaction
	if rf, ok := ret.Get(0).(func(store.Transaction, int, int) []store.Transaction); ok {
		r0 = rf(tran, pageNum, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.Transaction, int, int) error); ok {
		r1 = rf(tran, pageNum, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_FindPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPage'
type Storer_FindPage_Call struct {
	*mock.Call
}

// FindPage is a helper method to define mock.On call
//   - tran store.Transaction
//   - pageNum int
//   - pageSize int
func (_e *Storer_Expecter) FindPage(tran interface{}, pageNum interface{}, pageSize interface{}) *Storer_FindPage_Call {
	return &Storer_FindPage_Call{Call: _e.mock.On("FindPage", tran, pageNum, pageSize)}
}

func (_c *Storer_FindPage_Call) Run(run func(tran store.Transaction, pageNum int, pageSize int)) *Storer_FindPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(store.Transaction), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Storer_FindPage_Call) Return(_a0 []store.Transaction, _a1 error) *Storer_FindPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLastBlock provides a mock function with given fields:
func (_m *Storer) GetLastBlock() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_GetLastBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastBlock'
type Storer_GetLastBlock_Call struct {
	*mock.Call
}

// GetLastBlock is a helper method to define mock.On call
func (_e *Storer_Expecter) GetLastBlock() *Storer_GetLastBlock_Call {
	return &Storer_GetLastBlock_Call{Call: _e.mock.On("GetLastBlock")}
}

func (_c *Storer_GetLastBlock_Call) Run(run func()) *Storer_GetLastBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storer_GetLastBlock_Call) Return(_a0 int64, _a1 error) *Storer_GetLastBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, t
func (_m *Storer) InsertOne(ctx context.Context, t store.Transaction) error {
	ret := _m.Called(ctx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type Storer_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - t store.Transaction
func (_e *Storer_Expecter) InsertOne(ctx interface{}, t interface{}) *Storer_InsertOne_Call {
	return &Storer_InsertOne_Call{Call: _e.mock.On("InsertOne", ctx, t)}
}

func (_c *Storer_InsertOne_Call) Run(run func(ctx context.Context, t store.Transaction)) *Storer_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(store.Transaction))
	})
	return _c
}

func (_c *Storer_InsertOne_Call) Return(_a0 error) *Storer_InsertOne_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorer(t mockConstructorTestingTNewStorer) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
